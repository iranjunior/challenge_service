schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""
expression to compare columns of type Boolean. All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
expression to compare columns of type Int. All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "wealthSummary"
  """
  delete_wealthSummary(
    """filter the rows which have to be deleted"""
    where: wealthSummary_bool_exp!
  ): wealthSummary_mutation_response

  """
  delete single row from the table: "wealthSummary"
  """
  delete_wealthSummary_by_pk(id: Int!): wealthSummary

  """
  insert data into the table: "wealthSummary"
  """
  insert_wealthSummary(
    """the rows to be inserted"""
    objects: [wealthSummary_insert_input!]!

    """on conflict condition"""
    on_conflict: wealthSummary_on_conflict
  ): wealthSummary_mutation_response

  """
  insert a single row into the table: "wealthSummary"
  """
  insert_wealthSummary_one(
    """the row to be inserted"""
    object: wealthSummary_insert_input!

    """on conflict condition"""
    on_conflict: wealthSummary_on_conflict
  ): wealthSummary

  """
  update data of the table: "wealthSummary"
  """
  update_wealthSummary(
    """increments the integer columns with given value of the filtered values"""
    _inc: wealthSummary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: wealthSummary_set_input

    """filter the rows which have to be updated"""
    where: wealthSummary_bool_exp!
  ): wealthSummary_mutation_response

  """
  update single row of the table: "wealthSummary"
  """
  update_wealthSummary_by_pk(
    """increments the integer columns with given value of the filtered values"""
    _inc: wealthSummary_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: wealthSummary_set_input
    pk_columns: wealthSummary_pk_columns_input!
  ): wealthSummary
}

scalar numeric

"""
expression to compare columns of type numeric. All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in the ascending order, nulls last"""
  asc

  """in the ascending order, nulls first"""
  asc_nulls_first

  """in the ascending order, nulls last"""
  asc_nulls_last

  """in the descending order, nulls first"""
  desc

  """in the descending order, nulls first"""
  desc_nulls_first

  """in the descending order, nulls last"""
  desc_nulls_last
}

"""query root"""
type query_root {
  """
  fetch data from the table: "wealthSummary"
  """
  wealthSummary(
    """distinct select on columns"""
    distinct_on: [wealthSummary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wealthSummary_order_by!]

    """filter the rows returned"""
    where: wealthSummary_bool_exp
  ): [wealthSummary!]!

  """
  fetch aggregated fields from the table: "wealthSummary"
  """
  wealthSummary_aggregate(
    """distinct select on columns"""
    distinct_on: [wealthSummary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wealthSummary_order_by!]

    """filter the rows returned"""
    where: wealthSummary_bool_exp
  ): wealthSummary_aggregate!

  """fetch data from the table: "wealthSummary" using primary key columns"""
  wealthSummary_by_pk(id: Int!): wealthSummary
}

"""subscription root"""
type subscription_root {
  """
  fetch data from the table: "wealthSummary"
  """
  wealthSummary(
    """distinct select on columns"""
    distinct_on: [wealthSummary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wealthSummary_order_by!]

    """filter the rows returned"""
    where: wealthSummary_bool_exp
  ): [wealthSummary!]!

  """
  fetch aggregated fields from the table: "wealthSummary"
  """
  wealthSummary_aggregate(
    """distinct select on columns"""
    distinct_on: [wealthSummary_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [wealthSummary_order_by!]

    """filter the rows returned"""
    where: wealthSummary_bool_exp
  ): wealthSummary_aggregate!

  """fetch data from the table: "wealthSummary" using primary key columns"""
  wealthSummary_by_pk(id: Int!): wealthSummary
}

"""
columns and relationships of "wealthSummary"
"""
type wealthSummary {
  cdi: Float!
  gain: Float!
  hasHistory: Boolean!
  id: Int!
  profitability: Float
  total: Float!
}

"""
aggregated selection of "wealthSummary"
"""
type wealthSummary_aggregate {
  aggregate: wealthSummary_aggregate_fields
  nodes: [wealthSummary!]!
}

"""
aggregate fields of "wealthSummary"
"""
type wealthSummary_aggregate_fields {
  avg: wealthSummary_avg_fields
  count(columns: [wealthSummary_select_column!], distinct: Boolean): Int
  max: wealthSummary_max_fields
  min: wealthSummary_min_fields
  stddev: wealthSummary_stddev_fields
  stddev_pop: wealthSummary_stddev_pop_fields
  stddev_samp: wealthSummary_stddev_samp_fields
  sum: wealthSummary_sum_fields
  var_pop: wealthSummary_var_pop_fields
  var_samp: wealthSummary_var_samp_fields
  variance: wealthSummary_variance_fields
}

"""
order by aggregate values of table "wealthSummary"
"""
input wealthSummary_aggregate_order_by {
  avg: wealthSummary_avg_order_by
  count: order_by
  max: wealthSummary_max_order_by
  min: wealthSummary_min_order_by
  stddev: wealthSummary_stddev_order_by
  stddev_pop: wealthSummary_stddev_pop_order_by
  stddev_samp: wealthSummary_stddev_samp_order_by
  sum: wealthSummary_sum_order_by
  var_pop: wealthSummary_var_pop_order_by
  var_samp: wealthSummary_var_samp_order_by
  variance: wealthSummary_variance_order_by
}

"""
input type for inserting array relation for remote table "wealthSummary"
"""
input wealthSummary_arr_rel_insert_input {
  data: [wealthSummary_insert_input!]!
  on_conflict: wealthSummary_on_conflict
}

"""aggregate avg on columns"""
type wealthSummary_avg_fields {
  cdi: Float
  gain: Float
  id: Float
  profitability: Float
  total: Float
}

"""
order by avg() on columns of table "wealthSummary"
"""
input wealthSummary_avg_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""
Boolean expression to filter rows from the table "wealthSummary". All fields are combined with a logical 'AND'.
"""
input wealthSummary_bool_exp {
  _and: [wealthSummary_bool_exp]
  _not: wealthSummary_bool_exp
  _or: [wealthSummary_bool_exp]
  cdi: numeric_comparison_exp
  gain: numeric_comparison_exp
  hasHistory: Boolean_comparison_exp
  id: Int_comparison_exp
  profitability: numeric_comparison_exp
  total: numeric_comparison_exp
}

"""
unique or primary key constraints on table "wealthSummary"
"""
enum wealthSummary_constraint {
  """unique or primary key constraint"""
  wealthSummary_pkey
}

"""
input type for incrementing integer column in table "wealthSummary"
"""
input wealthSummary_inc_input {
  cdi: Float
  gain: Float
  id: Int
  profitability: Float
  total: Float
}

"""
input type for inserting data into table "wealthSummary"
"""
input wealthSummary_insert_input {
  cdi: Float
  gain: Float
  hasHistory: Boolean
  id: Int
  profitability: Float
  total: Float
}

"""aggregate max on columns"""
type wealthSummary_max_fields {
  cdi: Float
  gain: Float
  id: Int
  profitability: Float
  total: Float
}

"""
order by max() on columns of table "wealthSummary"
"""
input wealthSummary_max_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""aggregate min on columns"""
type wealthSummary_min_fields {
  cdi: Float
  gain: Float
  id: Int
  profitability: Float
  total: Float
}

"""
order by min() on columns of table "wealthSummary"
"""
input wealthSummary_min_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""
response of any mutation on the table "wealthSummary"
"""
type wealthSummary_mutation_response {
  """number of affected rows by the mutation"""
  affected_rows: Int!

  """data of the affected rows by the mutation"""
  returning: [wealthSummary!]!
}

"""
input type for inserting object relation for remote table "wealthSummary"
"""
input wealthSummary_obj_rel_insert_input {
  data: wealthSummary_insert_input!
  on_conflict: wealthSummary_on_conflict
}

"""
on conflict condition type for table "wealthSummary"
"""
input wealthSummary_on_conflict {
  constraint: wealthSummary_constraint!
  update_columns: [wealthSummary_update_column!]!
  where: wealthSummary_bool_exp
}

"""
ordering options when selecting data from "wealthSummary"
"""
input wealthSummary_order_by {
  cdi: order_by
  gain: order_by
  hasHistory: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""
primary key columns input for table: "wealthSummary"
"""
input wealthSummary_pk_columns_input {
  id: Int!
}

"""
select columns of table "wealthSummary"
"""
enum wealthSummary_select_column {
  """column name"""
  cdi

  """column name"""
  gain

  """column name"""
  hasHistory

  """column name"""
  id

  """column name"""
  profitability

  """column name"""
  total
}

"""
input type for updating data in table "wealthSummary"
"""
input wealthSummary_set_input {
  cdi: Float
  gain: Float
  hasHistory: Boolean
  id: Int
  profitability: Float
  total: Float
}

"""aggregate stddev on columns"""
type wealthSummary_stddev_fields {
  cdi: Float
  gain: Float
  id: Float
  profitability: Float
  total: Float
}

"""
order by stddev() on columns of table "wealthSummary"
"""
input wealthSummary_stddev_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""aggregate stddev_pop on columns"""
type wealthSummary_stddev_pop_fields {
  cdi: Float
  gain: Float
  id: Float
  profitability: Float
  total: Float
}

"""
order by stddev_pop() on columns of table "wealthSummary"
"""
input wealthSummary_stddev_pop_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""aggregate stddev_samp on columns"""
type wealthSummary_stddev_samp_fields {
  cdi: Float
  gain: Float
  id: Float
  profitability: Float
  total: Float
}

"""
order by stddev_samp() on columns of table "wealthSummary"
"""
input wealthSummary_stddev_samp_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""aggregate sum on columns"""
type wealthSummary_sum_fields {
  cdi: Float
  gain: Float
  id: Int
  profitability: Float
  total: Float
}

"""
order by sum() on columns of table "wealthSummary"
"""
input wealthSummary_sum_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""
update columns of table "wealthSummary"
"""
enum wealthSummary_update_column {
  """column name"""
  cdi

  """column name"""
  gain

  """column name"""
  hasHistory

  """column name"""
  id

  """column name"""
  profitability

  """column name"""
  total
}

"""aggregate var_pop on columns"""
type wealthSummary_var_pop_fields {
  cdi: Float
  gain: Float
  id: Float
  profitability: Float
  total: Float
}

"""
order by var_pop() on columns of table "wealthSummary"
"""
input wealthSummary_var_pop_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""aggregate var_samp on columns"""
type wealthSummary_var_samp_fields {
  cdi: Float
  gain: Float
  id: Float
  profitability: Float
  total: Float
}

"""
order by var_samp() on columns of table "wealthSummary"
"""
input wealthSummary_var_samp_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

"""aggregate variance on columns"""
type wealthSummary_variance_fields {
  cdi: Float
  gain: Float
  id: Float
  profitability: Float
  total: Float
}

"""
order by variance() on columns of table "wealthSummary"
"""
input wealthSummary_variance_order_by {
  cdi: order_by
  gain: order_by
  id: order_by
  profitability: order_by
  total: order_by
}

